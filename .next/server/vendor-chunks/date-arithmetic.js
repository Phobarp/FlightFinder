"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/date-arithmetic";
exports.ids = ["vendor-chunks/date-arithmetic"];
exports.modules = {

/***/ "(ssr)/./node_modules/date-arithmetic/index.js":
/*!***********************************************!*\
  !*** ./node_modules/date-arithmetic/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   century: () => (/* binding */ century),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   day: () => (/* binding */ day),\n/* harmony export */   decade: () => (/* binding */ decade),\n/* harmony export */   diff: () => (/* binding */ diff),\n/* harmony export */   endOf: () => (/* binding */ endOf),\n/* harmony export */   eq: () => (/* binding */ eq),\n/* harmony export */   gt: () => (/* binding */ gt),\n/* harmony export */   gte: () => (/* binding */ gte),\n/* harmony export */   hours: () => (/* binding */ hours),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   lt: () => (/* binding */ lt),\n/* harmony export */   lte: () => (/* binding */ lte),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   milliseconds: () => (/* binding */ milliseconds),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   minutes: () => (/* binding */ minutes),\n/* harmony export */   month: () => (/* binding */ month),\n/* harmony export */   neq: () => (/* binding */ neq),\n/* harmony export */   seconds: () => (/* binding */ seconds),\n/* harmony export */   startOf: () => (/* binding */ startOf),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   weekday: () => (/* binding */ weekday),\n/* harmony export */   year: () => (/* binding */ year)\n/* harmony export */ });\nvar MILI = \"milliseconds\", SECONDS = \"seconds\", MINUTES = \"minutes\", HOURS = \"hours\", DAY = \"day\", WEEK = \"week\", MONTH = \"month\", YEAR = \"year\", DECADE = \"decade\", CENTURY = \"century\";\nvar multiplierMilli = {\n    \"milliseconds\": 1,\n    \"seconds\": 1000,\n    \"minutes\": 60 * 1000,\n    \"hours\": 60 * 60 * 1000,\n    \"day\": 24 * 60 * 60 * 1000,\n    \"week\": 7 * 24 * 60 * 60 * 1000\n};\nvar multiplierMonth = {\n    \"month\": 1,\n    \"year\": 12,\n    \"decade\": 10 * 12,\n    \"century\": 100 * 12\n};\nfunction daysOf(year) {\n    return [\n        31,\n        daysInFeb(year),\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31\n    ];\n}\nfunction daysInFeb(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0 ? 29 : 28;\n}\nfunction add(d, num, unit) {\n    d = new Date(d);\n    switch(unit){\n        case MILI:\n        case SECONDS:\n        case MINUTES:\n        case HOURS:\n        case DAY:\n        case WEEK:\n            return addMillis(d, num * multiplierMilli[unit]);\n        case MONTH:\n        case YEAR:\n        case DECADE:\n        case CENTURY:\n            return addMonths(d, num * multiplierMonth[unit]);\n    }\n    throw new TypeError('Invalid units: \"' + unit + '\"');\n}\nfunction addMillis(d, num) {\n    var nextDate = new Date(+d + num);\n    return solveDST(d, nextDate);\n}\nfunction addMonths(d, num) {\n    var year = d.getFullYear(), month = d.getMonth(), day = d.getDate(), totalMonths = year * 12 + month + num, nextYear = Math.trunc(totalMonths / 12), nextMonth = totalMonths % 12, nextDay = Math.min(day, daysOf(nextYear)[nextMonth]);\n    var nextDate = new Date(d);\n    nextDate.setFullYear(nextYear);\n    // To avoid a bug when sets the Feb month\n    // with a date > 28 or date > 29 (leap year)\n    nextDate.setDate(1);\n    nextDate.setMonth(nextMonth);\n    nextDate.setDate(nextDay);\n    return nextDate;\n}\nfunction solveDST(currentDate, nextDate) {\n    var currentOffset = currentDate.getTimezoneOffset(), nextOffset = nextDate.getTimezoneOffset();\n    // if is DST, add the difference in minutes\n    // else the difference is zero\n    var diffMinutes = nextOffset - currentOffset;\n    return new Date(+nextDate + diffMinutes * multiplierMilli[\"minutes\"]);\n}\nfunction subtract(d, num, unit) {\n    return add(d, -num, unit);\n}\nfunction startOf(d, unit, firstOfWeek) {\n    d = new Date(d);\n    switch(unit){\n        case CENTURY:\n        case DECADE:\n        case YEAR:\n            d = month(d, 0);\n        case MONTH:\n            d = date(d, 1);\n        case WEEK:\n        case DAY:\n            d = hours(d, 0);\n        case HOURS:\n            d = minutes(d, 0);\n        case MINUTES:\n            d = seconds(d, 0);\n        case SECONDS:\n            d = milliseconds(d, 0);\n    }\n    if (unit === DECADE) d = subtract(d, year(d) % 10, \"year\");\n    if (unit === CENTURY) d = subtract(d, year(d) % 100, \"year\");\n    if (unit === WEEK) d = weekday(d, 0, firstOfWeek);\n    return d;\n}\nfunction endOf(d, unit, firstOfWeek) {\n    d = new Date(d);\n    d = startOf(d, unit, firstOfWeek);\n    switch(unit){\n        case CENTURY:\n        case DECADE:\n        case YEAR:\n        case MONTH:\n        case WEEK:\n            d = add(d, 1, unit);\n            d = subtract(d, 1, DAY);\n            d.setHours(23, 59, 59, 999);\n            break;\n        case DAY:\n            d.setHours(23, 59, 59, 999);\n            break;\n        case HOURS:\n        case MINUTES:\n        case SECONDS:\n            d = add(d, 1, unit);\n            d = subtract(d, 1, MILI);\n    }\n    return d;\n}\nvar eq = createComparer(function(a, b) {\n    return a === b;\n});\nvar neq = createComparer(function(a, b) {\n    return a !== b;\n});\nvar gt = createComparer(function(a, b) {\n    return a > b;\n});\nvar gte = createComparer(function(a, b) {\n    return a >= b;\n});\nvar lt = createComparer(function(a, b) {\n    return a < b;\n});\nvar lte = createComparer(function(a, b) {\n    return a <= b;\n});\nfunction min() {\n    return new Date(Math.min.apply(Math, arguments));\n}\nfunction max() {\n    return new Date(Math.max.apply(Math, arguments));\n}\nfunction inRange(day, min, max, unit) {\n    unit = unit || \"day\";\n    return (!min || gte(day, min, unit)) && (!max || lte(day, max, unit));\n}\nvar milliseconds = createAccessor(\"Milliseconds\");\nvar seconds = createAccessor(\"Seconds\");\nvar minutes = createAccessor(\"Minutes\");\nvar hours = createAccessor(\"Hours\");\nvar day = createAccessor(\"Day\");\nvar date = createAccessor(\"Date\");\nvar month = createAccessor(\"Month\");\nvar year = createAccessor(\"FullYear\");\nfunction decade(d, val) {\n    return val === undefined ? year(startOf(d, DECADE)) : add(d, val + 10, YEAR);\n}\nfunction century(d, val) {\n    return val === undefined ? year(startOf(d, CENTURY)) : add(d, val + 100, YEAR);\n}\nfunction weekday(d, val, firstDay) {\n    var w = (day(d) + 7 - (firstDay || 0)) % 7;\n    return val === undefined ? w : add(d, val - w, DAY);\n}\nfunction diff(date1, date2, unit, asFloat) {\n    var dividend, divisor, result;\n    switch(unit){\n        case MILI:\n        case SECONDS:\n        case MINUTES:\n        case HOURS:\n        case DAY:\n        case WEEK:\n            dividend = date2.getTime() - date1.getTime();\n            break;\n        case MONTH:\n        case YEAR:\n        case DECADE:\n        case CENTURY:\n            dividend = (year(date2) - year(date1)) * 12 + month(date2) - month(date1);\n            break;\n        default:\n            throw new TypeError('Invalid units: \"' + unit + '\"');\n    }\n    switch(unit){\n        case MILI:\n            divisor = 1;\n            break;\n        case SECONDS:\n            divisor = 1000;\n            break;\n        case MINUTES:\n            divisor = 1000 * 60;\n            break;\n        case HOURS:\n            divisor = 1000 * 60 * 60;\n            break;\n        case DAY:\n            divisor = 1000 * 60 * 60 * 24;\n            break;\n        case WEEK:\n            divisor = 1000 * 60 * 60 * 24 * 7;\n            break;\n        case MONTH:\n            divisor = 1;\n            break;\n        case YEAR:\n            divisor = 12;\n            break;\n        case DECADE:\n            divisor = 120;\n            break;\n        case CENTURY:\n            divisor = 1200;\n            break;\n        default:\n            throw new TypeError('Invalid units: \"' + unit + '\"');\n    }\n    result = dividend / divisor;\n    return asFloat ? result : Math.round(result);\n}\nfunction createAccessor(method) {\n    var hourLength = function(method) {\n        switch(method){\n            case \"Milliseconds\":\n                return 3600000;\n            case \"Seconds\":\n                return 3600;\n            case \"Minutes\":\n                return 60;\n            case \"Hours\":\n                return 1;\n            default:\n                return null;\n        }\n    }(method);\n    return function(d, val) {\n        if (val === undefined) return d[\"get\" + method]();\n        var dateOut = new Date(d);\n        dateOut[\"set\" + method](val);\n        if (hourLength && dateOut[\"get\" + method]() != val && (method === \"Hours\" || val >= hourLength && dateOut.getHours() - d.getHours() < Math.floor(val / hourLength))) {\n            //Skip DST hour, if it occurs\n            dateOut[\"set\" + method](val + hourLength);\n        }\n        return dateOut;\n    };\n}\nfunction createComparer(operator) {\n    return function(a, b, unit) {\n        return operator(+startOf(a, unit), +startOf(b, unit));\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/date-arithmetic/index.js\n");

/***/ })

};
;